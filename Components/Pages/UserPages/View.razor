@page "/users/view"
@rendermode InteractiveServer
@using Microsoft.EntityFrameworkCore
@using Microsoft.AspNetCore.Components.QuickGrid
@using DogAdoptionProject.Models
@using DogAdoptionProject.Data
@implements IAsyncDisposable
@inject IDbContextFactory<DogAdoptionProject.Data.DogAdoptionProjectContext> DbFactory

<PageTitle>Index</PageTitle>

<h1>Index</h1>
<form class="d-flex" role="search">

    <input class="form-control me-2" type="search" placeholder="Search"
           aria-label="Search" @bind="UsernameFilter" @bind:event="oninput">

    <button class="btn btn-outline-success text-nowrap" type="submit">

        <i class="bi bi-search"></i> Search

    </button>

</form>

<QuickGrid Class="table" Items="FilteredUsers" Pagination="pagination">
    <Paginator State="pagination" />
    <PropertyColumn Property="user => user.Username" Sortable="true" />
    <PropertyColumn Property="user => user.Level" />

</QuickGrid>

<div>
    <a href="/home1">Back to Home</a>
</div>

@code {
    private DogAdoptionProjectContext context = default!;

    private PaginationState pagination = new PaginationState { ItemsPerPage = 10 };

    [SupplyParameterFromQuery]
    private string? UsernameFilter { get; set; }

    private IQueryable<User> FilteredUsers =>
        context.User.Where(m => m.Username!.Contains(UsernameFilter ?? string.Empty));

    protected override void OnInitialized()
    {
        context = DbFactory.CreateDbContext();
    }

    public async ValueTask DisposeAsync() => await context.DisposeAsync();
}
