@page "/dogs"
@rendermode InteractiveServer
@using Microsoft.EntityFrameworkCore
@using Microsoft.AspNetCore.Components.QuickGrid
@using DogAdoptionProject.Models
@using DogAdoptionProject.Data
@implements IAsyncDisposable
@inject IDbContextFactory<DogAdoptionProject.Data.DogAdoptionProjectContext> DbFactory

<PageTitle>Index</PageTitle>

<h1>Index</h1>
<form class="d-flex" role="search">

    <input class="form-control me-2" type="search" placeholder="Search"
           aria-label="Search" @bind="NameFilter" @bind:event="oninput">

    <button class="btn btn-outline-success text-nowrap" type="submit">

        <i class="bi bi-search"></i> Search

    </button>

</form>
<p>
    <a href="dogs/create">Create New</a>
</p>

<QuickGrid Class="table" Items="FilteredDogs" Pagination="pagination">
    <Paginator State="pagination" />
    <TemplateColumn Context="dog">
        <img src="images/@dog.pictureUrl" alt="@dog.pictureUrl" style="width:100px; height:100px" />
    </TemplateColumn>
    <PropertyColumn Property="dog => dog.Name" Sortable="true" />
    <PropertyColumn Property="dog => dog.Id" />
    <PropertyColumn Property="dog => dog.Description" />
    <PropertyColumn Property="dog => dog.Status" />
    <PropertyColumn Property="dog => dog.Type" />

    <TemplateColumn Context="dog">
        <a href="@($"dogs/edit?id={dog.Id}")">Edit</a> |
        <a href="@($"dogs/details?id={dog.Id}")">Details</a> |
        <a href="@($"dogs/delete?id={dog.Id}")">Delete</a>
    </TemplateColumn>
</QuickGrid>

<div>
    <a href="/home2">Back to Home</a>
</div>

@code {
    private DogAdoptionProjectContext context = default!;

    private PaginationState pagination = new PaginationState { ItemsPerPage = 10 };

    [SupplyParameterFromQuery]
    private string? NameFilter { get; set; }

    private IQueryable<Dog> FilteredDogs =>
        context.Dog.Where(m => m.Name!.Contains(NameFilter ?? string.Empty));



    protected override void OnInitialized()
    {
        context = DbFactory.CreateDbContext();
    }

    public async ValueTask DisposeAsync() => await context.DisposeAsync();
}
